{"version":3,"sources":["logo.svg","context/pomodoroContext.jsx","context/useLocalStorage.js","components/lista.jsx","assets/sounds/click.mp3","assets/sounds/alarm.mp3","components/timer.jsx","App.js","reportWebVitals.js","index.js"],"names":["PomodoroContext","createContext","PomodoroProvider","children","useState","taskView","setTaskView","Provider","value","useLocalStorage","tarea","item","window","localStorage","getItem","JSON","parse","err","storedValue","setStoredValue","items","push","setItem","stringify","console","log","Lista","nombre","id","urgente","inputText","setInputText","setTarea","tareas","setTareas","useContext","addTask","useEffect","length","tareaList","map","task","i","className","onClick","newArray","splice","deleteItem","onSubmit","type","placeholder","defaultValue","onChange","e","target","Math","floor","random","required","Timer","start","setStart","minutos","setMinutos","seconds","setSeconds","volumen","setVolumen","onBreak","setOnBreak","soundPlay","src","Howl","play","pomodoro","setInterval","clearInterval","click","alarm","swal","title","text","icon","buttons","then","willDelete","m","s","Howler","volume","disabled","preventDefault","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2c2b4207.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import { createContext, useState } from \"react\";\n\n\nexport const PomodoroContext = createContext();\n\n\nexport const PomodoroProvider = ({ children }) => {\n\n    const [taskView, setTaskView] = useState('');\n\n    return (\n        <PomodoroContext.Provider\n        value={{\n            taskView,\n            setTaskView\n        }}\n        >\n            { children }\n        </PomodoroContext.Provider>\n    )\n}","import { useState } from \"react\"\n\nexport function useLocalStorage(tarea) {\n   \n    const [storedValue, setStoredValue] = useState(()=>{\n        try{\n          const item = window.localStorage.getItem('tareas');\n          return item ? JSON.parse(item) : tarea\n        } catch (err) {return tarea};\n    });\n\n    const setValue = value => {\n        try{\n            setStoredValue(value);\n            let items = JSON.parse(localStorage.getItem('tareas') || '[]');\n            items.push(value);\n            window.localStorage.setItem('tareas', JSON.stringify(items))\n        } catch (err) {console.log(err)};\n    }\n\n    return [storedValue, setValue, setStoredValue]\n}","import React, { useContext, useEffect, useState } from 'react';\nimport {  TiPlusOutline } from \"react-icons/ti\";\nimport { PomodoroContext } from '../context/pomodoroContext';\nimport { useLocalStorage } from '../context/useLocalStorage';\nimport { FaPlusCircle, FaRegTrashAlt } from \"react-icons/fa\";\nexport const Lista = () => {\n   \n    const [inputText, setInputText] = useState({nombre:'', id:0, urgente:false});\n    const [tarea, setTarea] = useLocalStorage(inputText);\n    const [tareas, setTareas] = useState([]);\n    const [storedValue, setStoredValue] = useLocalStorage();\n    const [reloadPage, setReloadPage] = useState(false);\n    const {taskView, setTaskView} = useContext(PomodoroContext);\n\n    const addTask = () => {\n        setTarea(inputText);\n        setInputText({nombre:'', id:0, urgente:false})\n    }\n\n    const deleteItem = (id) => {\n    \n      for( let i = 0; i < tareas.length;  i++){\n        if(id === tareas[i].id){\n\n          if(tareas[i].nombre === taskView){\n            setTaskView('')\n          }\n          let newArray = [...tareas];\n          newArray.splice(i, 1);\n          console.log(newArray)\n          window.localStorage.setItem('tareas', JSON.stringify(newArray));\n          setTareas(JSON.parse(window.localStorage.getItem('tareas')))\n          return;\n        }\n      }\n    }\n\n    useEffect(()=>{\n   \n      if(tarea.length>=1 || tarea.nombre != ''){\n        setTareas(JSON.parse(window.localStorage.getItem('tareas')))\n      } else {\n          return;\n      }\n\n    },[tarea])\n   \n    if(tareas.length >= 1){\n        const tareaList = tareas.map((task, i)=>{\n            return (\n                <section key={i} className={`section ${task.urgente}`}>\n                <span className='tarea-button '> <a onClick={()=>{setTaskView(task.nombre)}}>{task.nombre}</a>  <a className='boton-lista' onClick={()=>deleteItem(task.id)}><FaRegTrashAlt/></a></span>\n              \n               </section>    \n            )\n        })\n        return(\n        <div className=\"lista\">\n            <h3>Lista</h3>\n            <form onSubmit={addTask}>\n            <div className=\"input-row\">\n            <input type='text' placeholder='Nombre tarea' defaultValue={inputText.nombre} onChange={(e)=>{setInputText({nombre:e.target.value,id:Math.floor(Math.random()*1000000),urgente:false })}} required/>\n            \n            <select id='urgencia'  onChange={(e)=>{setInputText({...inputText, urgente: e.target.value})}}>\n            <option value=\"false\">No urgente</option>\n            <option value=\"true\">Urgente</option>\n           \n          </select>\n            <button type='submit'> <FaPlusCircle/></button>\n            </div>\n            </form>\n            \n            <div className=\"list-row\">\n             {tareaList}\n            </div>\n           \n        </div>\n    )\n    } else {\n       \n        return(\n        <div className=\"lista\">\n            <h3>Lista</h3>\n            <form onSubmit={addTask}>\n            <div className=\"input-row\">\n            <input type='text' placeholder='Nombre tarea' defaultValue={inputText.nombre} onChange={(e)=>{setInputText({nombre:e.target.value,id:Math.floor(Math.random()*1000000),urgente:false })}} required/>      \n            <select id='urgencia'  onChange={(e)=>{setInputText({...inputText, urgente: e.target.value})}}>\n            <option value=\"false\">No urgente</option>\n            <option value=\"true\">Urgente</option>\n           \n          </select>\n            <button type='submit'> <FaPlusCircle/></button>\n            </div>\n            </form>\n           \n            <div className=\"list-row\">\n             <a>No hay tareas</a>\n            </div>\n           \n        </div>\n    )\n    }\n            \n    \n    \n}","export default __webpack_public_path__ + \"static/media/click.aecc5cce.mp3\";","export default __webpack_public_path__ + \"static/media/alarm.d48422c4.mp3\";","import React, { useContext, useEffect, useState } from 'react';\nimport click from '../assets/sounds/click.mp3';\nimport alarm from '../assets/sounds/alarm.mp3';\nimport {Howl, Howler} from 'howler';\nimport { PomodoroContext } from '../context/pomodoroContext';\nimport { FaVolumeDown, FaVolumeMute } from \"react-icons/fa\";\nimport swal from 'sweetalert';\n\nexport const Timer = () => {\n\n    const {taskView, setTaskView} = useContext(PomodoroContext);\n\n\n    const  [hora, setHora] = useState();\n    const [start, setStart] = useState(false);\n    const [intervalid, setIntervalid] = useState(null);\n    const [minutos, setMinutos] = useState(25);\n    const  [seconds, setSeconds] = useState(0);\n    const [volumen, setVolumen] = useState(1.0);\n    const [onBreak, setOnBreak] = useState(false);\n\n    \n    const runPomodoro = (e) => {\n        e.preventDefault();\n        setStart(true);\n        setMinutos(24);\n        setSeconds(59);\n    }\n    const runBreak = ()=> {\n        setTaskView('¡Break!');\n        setStart(true);\n        setMinutos(3);\n        setSeconds(59);\n        setOnBreak(true)\n\n    }\n    const resetPomdoro = (e) => {\n        setStart(false);\n    }\n\n    const soundPlay = (src) => {\n        const sound = new Howl({\n            src\n        })\n        sound.play();\n        \n    }\n    \n    \n     useEffect(()=>{\n         if(start){\n             \n            let pomodoro = setInterval(() => {\n                clearInterval(pomodoro);\n                if(seconds === 0){\n                    if(minutos !== 0){\n                        setSeconds(59);\n                        setMinutos(minutos - 1);\n                        soundPlay(click)\n                    } else {\n                      \n                        soundPlay(alarm);\n                        setStart(false);\n                        if(onBreak){\n                            swal(\"Listo!\", \"Puedes añadir otra tarea\", \"success\");\n                            setOnBreak(false)\n                            setTaskView('');\n                        }else {\n                            swal({\n                                title:'¡Tiempo completado!',\n                                text:'¿Deseas empezar el descanso?',\n                                icon:'success',\n                                buttons: [\"No!\", \"Break!\"],\n                            }).then(willDelete => {\n                                if(willDelete){\n                                    runBreak();\n                                } else {\n                                    swal(\"Listo!\", \"Puedes añadir otra tarea\", \"success\");\n    \n                                }\n                            })\n                        }\n                    \n                     \n                    }\n                } else {\n                        setSeconds(seconds - 1)\n                        soundPlay(click)\n                }\n   \n            }, 1000);\n            \n         }\n        \n     }, [seconds]);\n\n    \n     const m = minutos < 10 ? `0${minutos}` : minutos;\n     const s = seconds < 10 ? `0${seconds}` : seconds;\n\n     useEffect(()=>{\n        Howler.volume(volumen);\n     },[volumen])\n    \n     \n   \n    return(\n        <div className=\"timer\">\n\n            <div className=\"reloj\">\n                { start ? (\n                <h1>{m + ':' + s}</h1>         \n                ) : (\n                <h1>25:00</h1>\n                )\n\n                }\n       \n            </div>\n            <div className=\"container-flex\">\n                    {taskView === '' ? ( <h3>No hay tarea</h3> ): (<h3>{taskView}</h3>)}\n            </div>\n            <div className=\"container-flex\">\n                <button disabled={start} onClick={runPomodoro}>\n                    Empezar\n                </button>\n                <button onClick={resetPomdoro}>\n                    Detener\n                </button>\n            </div>\n\n            <div className=\"container-flex\">\n              \n              { volumen === 0 ? ( \n              <h3 className='volume' onClick={()=>setVolumen(1.0)}>    \n                  <FaVolumeMute/>\n              </h3>   \n             ) : ( \n              <h3 className='volume' onClick={()=>setVolumen(0)}>\n                  <FaVolumeDown/>     \n              </h3>   \n             )}\n             \n            </div>\n        </div>\n    )\n}","import logo from './logo.svg';\nimport './App.css';\nimport { Lista } from './components/lista';\nimport { Timer } from './components/timer';\nimport { PomodoroProvider } from './context/pomodoroContext';\n\nfunction App() {\n  return (\n    <PomodoroProvider>\n\n    \n    <div className='container'>\n      <div className='titulo'>\n      <h1>Pomodoro</h1>\n      </div>\n\n      <div className='split-container'>\n        <div>\n        <Lista/>\n        </div>\n        <div>\n        <Timer/>\n        </div>\n      </div>\n      \n    </div>\n    </PomodoroProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}